/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ASTOperations;

import com.sun.source.tree.CaseTree;
import com.sun.source.tree.CatchTree;
import com.sun.source.tree.ClassTree;
import com.sun.source.tree.CompilationUnitTree;
import com.sun.source.tree.ConditionalExpressionTree;
import com.sun.source.tree.DoWhileLoopTree;
import com.sun.source.tree.EnhancedForLoopTree;
import com.sun.source.tree.ForLoopTree;
import com.sun.source.tree.IfTree;
import com.sun.source.tree.MethodTree;
import com.sun.source.tree.WhileLoopTree;
import com.sun.source.util.TreeScanner;
/**
 * Main scanner of the AST generated by the compilation task.
 * It is responsible for scanning the AST and processes any of the Tree nodes that are relevant
 * to the metrics produced if they exist.
 * 
 * @author ioannis
 */
public class ASTScanner extends TreeScanner<Void, Void> {
    
    public static Storage theStorage = new Storage();

    public ASTScanner(CompilationUnitTree compilationUnitTree) {
    }
    
    @Override
    public Void visitIf(IfTree it,Void a){
        theStorage.increaseIfTrees();
        theStorage.increaseComplexity();
        return super.visitIf(it, a);
    }
    
    @Override
    public Void visitWhileLoop(WhileLoopTree wl, Void a){
        theStorage.increaseComplexity();
        return super.visitWhileLoop(wl,a);
    
    }
    
    @Override
    public Void visitForLoop(ForLoopTree flt, Void a){
        theStorage.increaseNoOfForLoops();
        return super.visitForLoop(flt, a);
    }
    
    @Override
    public Void visitMethod(MethodTree mt, Void a){
        String nb = mt.getName().toString();
        if(!"<init>".equals(nb)){
            //System.out.println("Method: " +mt.getName());
            theStorage.increaseMethodCount();
        }        
        return super.visitMethod(mt, a);
    }
    
    @Override
    public Void visitCase(CaseTree ct, Void a) {
        theStorage.increaseComplexity();
        return super.visitCase(ct, a);
    }
    
    @Override
    public Void visitCatch(CatchTree ct, Void a){
        theStorage.increaseComplexity();
        return super.visitCatch(ct, a);
    }

    @Override
    public Void visitConditionalExpression(ConditionalExpressionTree arg0, Void a) {
        theStorage.increaseComplexity();
        return super.visitConditionalExpression(arg0,a);
    }
    
    @Override
    public Void visitDoWhileLoop(DoWhileLoopTree dwl, Void a) {
        theStorage.increaseComplexity();
        return super.visitDoWhileLoop(dwl, a);
    }
    
    @Override
    public Void visitClass(ClassTree ct, Void a){
        String nb = ct.getSimpleName().toString();
        if(!"".equals(nb)){
        theStorage.increaseClassCount();
        }
        return super.visitClass(ct, a);
    }

    @Override
    public Void visitEnhancedForLoop(EnhancedForLoopTree efl, Void a){
        theStorage.increaseNoOfForLoops();
        return super.visitEnhancedForLoop(efl, a);
    }
    
}
